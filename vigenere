alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_' #Alphabet library used in my program
def main(): #main function
    global condition
    condition = int(input("Input 0 if you want to encrypt a message. Input 1 if you want to decrypt a message.")) #lets the user choose encryption or decryption
    a = input("Put the message in: ")
    global message
    message = a.upper() #gets the message as a string consisted of upper case letters since all outputs will be in uppercase letters
    a = input("Put the secret key in: ")
    global key
    key = a.upper() #gets the key as a string consisted of upper case letters; same reason as above
    if condition == 0: #decrypts or encrypts the message based on the user's input
        print("The encrypted message is:",encryptordecrypt(message)) 
    elif condition == 1:
        print("The decrypted message is:",encryptordecrypt(message)) 
def getalphavalue(onecharacter): #returns the alphanumeric value, including '_', of a character.
    for i in range(27):
        if alphabet[i] == onecharacter:
            return i
        elif onecharacter == ' ':
            return 26
def encryptordecrypt(string): #encrypts the message based on the key 
    temp = 0 #initializes 3 required internal variables and 1 string
    rpt = 0
    encryptvalue = 0
    result = '' 
    for char in string: #creates a new string with encrypted messages using getalphavalue function.
        temp = getalphavalue(char)
        encryptvalue = getalphavalue(key[rpt])
        if condition == 0:
            temp = temp + encryptvalue #adds the alphanumeric value of the message's character to the alphanumeric value of the key's character.
            if temp > 26: #if the value goes over the length of 'alphabet', it goes back to the first item of 'alphabet'.
                temp-=27
        else:
            temp = temp - encryptvalue
            if temp < 0:
                temp+=27
        result = result + alphabet[temp] #converts the alphanumeric value back to the character
        if len(key)-1 > rpt: #controls the rpt variable; if rpt becomes bigger than the length of the key, it resets rpt to 0 
            rpt+= 1
        else:
            rpt = 0
    return result
bruh = 1 
while bruh == 1: #if the user puts 1, the user can keep encrypting and decrypting strings.
    main()
    bruh = int(input("Put 1 to keep going; put any other number to terminate (or type a non-integer value and crash the program)."))
